# -*- coding=utf-8 -*-

"""Find the greatest product of thirteen consecutive digits in the 1000-digit number:

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

import sys
sys.path.append("..")

from libeuler import core

class problem(core.FunctionSet):

    num_string  = "73167176531330624919225119674426574742355349194934"
    num_string += "96983520312774506326239578318016984801869478851843"
    num_string += "85861560789112949495459501737958331952853208805511"
    num_string += "12540698747158523863050715693290963295227443043557"
    num_string += "66896648950445244523161731856403098711121722383113"
    num_string += "62229893423380308135336276614282806444486645238749"
    num_string += "30358907296290491560440772390713810515859307960866"
    num_string += "70172427121883998797908792274921901699720888093776"
    num_string += "65727333001053367881220235421809751254540594752243"
    num_string += "52584907711670556013604839586446706324415722155397"
    num_string += "53697817977846174064955149290862569321978468622482"
    num_string += "83972241375657056057490261407972968652414535100474"
    num_string += "82166370484403199890008895243450658541227588666881"
    num_string += "16427171479924442928230863465674813919123162824586"
    num_string += "17866458359124566529476545682848912883142607690042"
    num_string += "24219022671055626321111109370544217506941658960408"
    num_string += "07198403850962455444362981230987879927244284909188"
    num_string += "84580156166097919133875499200524063689912560717606"
    num_string += "05886116467109405077541002256983155200055935729725"
    num_string += "71636269561882670428252483600823257530420752963450"

    def f0(self, n):
        max = 1
        for i in range(len(self.num_string) - n + 1):
            nums = [ int(x) for x in self.num_string[i:i+n] ]
            prod = 1
            for num in nums:
                prod = prod * num
            
            if prod > max:
                max = prod

        return max


P = problem(df="0", dn="13")
P.run()

#------------------------------------------------------------------------------#

